<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on ĭn″kō-hîr′ənt</title>
    <link>http://martinpapanek.com/posts/</link>
    <description>Recent content in Posts on ĭn″kō-hîr′ənt</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 05 Apr 2021 00:47:00 +0200</lastBuildDate><atom:link href="http://martinpapanek.com/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Choosing a programming language: Memory semantics</title>
      <link>http://martinpapanek.com/posts/memory_semantics_rust_cpp_zig_gc/</link>
      <pubDate>Mon, 05 Apr 2021 00:47:00 +0200</pubDate>
      
      <guid>http://martinpapanek.com/posts/memory_semantics_rust_cpp_zig_gc/</guid>
      <description>With the abundance of modern languages nowadays, it can be quite difficult to choose a language for a project.
One of the hardest concepts to reason about when building your program is memory. Abstractions introduced in high level programming languages (by that I mean higher level than Assembley) as well as the abstractions done at the operating system level conceal what is really going on when your program reads and writes memory.</description>
    </item>
    
  </channel>
</rss>
